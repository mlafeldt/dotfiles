""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Most of this is based on Gary Bernhardt's .vimrc file:
" https://github.com/garybernhardt/dotfiles/blob/master/.vimrc
" vim: set ts=2 sts=2 sw=2 expandtab:
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" BASIC EDITING CONFIGURATION
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" enter vim mode
set nocompatible

" set up Vundle (https://github.com/gmarik/vundle)
filetype off
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" list of plugins installed by Vundle
Bundle 'gmarik/vundle'
Bundle 'airblade/vim-gitgutter'
Bundle 'altercation/vim-colors-solarized'
Bundle 'godlygeek/tabular'
Bundle 'jnwhiteh/vim-golang'
Bundle 'mlafeldt/vim-puppet'
Bundle 'tpope/vim-bundler'
Bundle 'tpope/vim-dispatch'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-rake'
Bundle 'wincent/Command-T'

" end of Vundle setup
filetype plugin indent on

" allow unsaved background buffers and remember marks/undo for them
set hidden
" remember more commands and searches
set history=10000
" always show status line
set laststatus=2
" custom status line
set statusline=%<%f\ (%{&ft})\ %-4(%m%)%=%-19(%3l,%02c%03V%)
" highlight current line
set cursorline
" height of command line
set cmdheight=2
" jump to the first open window that contains the specified buffer
set switchbuf=useopen
" show line numbers
set number
" minimal number of columns to use for the line number
set numberwidth=5
" always show tab page labels
set showtabline=2
" minimal number of columns for current window
set winwidth=79
" prevent vim from clobbering the scrollback buffer
set t_ti= t_te=
" keep more context when scrolling off the end of a buffer
set scrolloff=3
" store temporary files in a central spot
set backup
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
" allow backspacing over everything in insert mode
set backspace=indent,eol,start
" display incomplete commands
set showcmd
" enable syntax highlighting
syntax on
" use emacs-style tab completion when selecting files etc.
set wildmode=longest,list
" make tab completion for files/buffers act like bash
set wildmenu
" show line and column number of the cursor position
set ruler
" highlight screen column
set colorcolumn=81
" better list strings
set listchars=tab:▸\ ,eol:¬,extends:❯,precedes:❮

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COLORS AND FONTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set background theme
set background=dark

if has('unix')
  let s:uname = system('uname')
  if s:uname == "Darwin\n"
    " OSX-specific options
    let g:solarized_termtrans = 1
    colorscheme solarized
    set guifont=SourceCodePro-Regular:h12
  else
    " Linux-specific options
    set guifont=SourceCodePro
  endif
endif

if has('gui_running')
  colorscheme solarized
  " hide toolbar
  set guioptions-=T
endif

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" MAPPINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set leader key to comma
let mapleader=","

" make ctrl+c and ctrl+v copy and paste
if has('gui_running')
  nmap <C-S-V> "+gP
  imap <C-S-V> <ESC><C-S-V>i
  vmap <C-S-C> "+y
endif

" open files in directory of current file
cnoremap %% <C-R>=expand('%:h').'/'<cr>
map <leader>e :edit %%
map <leader>v :view %%

" toggle files
nnoremap <leader><leader> <c-^>

" spell-check current file
nnoremap <leader>S :!aspell --check --dont-backup %<cr>

" git diff for current file (unstaged and staged)
nnoremap <leader>d :!git diff %<cr>
nnoremap <leader>D :!git diff --cached %<cr>

" re-hardwrap paragraphs of text
nnoremap <leader>q gwip

" create markdown h1 and h2 headings
nnoremap <leader>1 yypVr=
nnoremap <leader>2 yypVr-

" save file with sudo
cmap w!! %!sudo tee > /dev/null %

" multipurpose tab key: indent at the beginning of a line; else, do completion
function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" rename current file
function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'), 'file')
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>n :call RenameFile()<cr>

" promote variable to rspec let
function! PromoteToLet()
  normal! dd
  normal! P
  .s/\(\w\+\) = \(.*\)$/let(:\1) { \2 }/
  normal ==
endfunction
command! PromoteToLet :call PromoteToLet()
map <leader>p :PromoteToLet<cr>

" insert hash rocket with ctrl+l
imap <c-l> <space>=><space>

" disable arrow keys
"map <up> <nop>
"map <down> <nop>
"map <left> <nop>
"map <right> <nop>

" move by screen line
nnoremap j gj
nnoremap k gk

" open new vertical/horizontal split and switch over to it
nnoremap <leader>w <c-w>v<c-w>l
nnoremap <leader>W <c-w>s<c-w>j

" move around splits more easily
nnoremap <c-h> <c-w>h
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-l> <c-w>l

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" SEARCHING & MOVING
" http://stevelosh.com/blog/2010/09/coming-home-to-vim/
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

nnoremap / /\v
vnoremap / /\v
set ignorecase
set smartcase
set gdefault
set incsearch
set showmatch
set hlsearch
nnoremap <leader><space> :nohlsearch<cr>
nnoremap <tab> %
vnoremap <tab> %

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" COMMAND-T PLUGIN
" https://wincent.com/blog/tweaking-command-t-and-vim-for-use-in-the-terminal-and-tmux
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set ttimeoutlen=50

if &term =~ "xterm" || &term =~ "screen"
  let g:CommandTCancelMap     = ['<ESC>', '<C-c>']
  let g:CommandTSelectNextMap = ['<C-n>', '<C-j>', '<ESC>OB']
  let g:CommandTSelectPrevMap = ['<C-p>', '<C-k>', '<ESC>OA']
endif

map <leader>f :CommandTFlush<cr>\|:CommandT<cr>
map <leader>F :CommandTFlush<cr>\|:CommandT %%<cr>
map <leader>b :CommandTBuffer<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" VIM-GITCUTTER
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let g:gitgutter_enabled = 1
let g:gitgutter_highlight_lines = 0
" set background color of sign column to Solarized background color
highlight SignColumn ctermbg=8 guibg=#002b36
map <leader>h :GitGutterNextHunk<cr>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM AUTOCMDS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

augroup vimrcEx
  " clear all autocmds in this group
  autocmd!

  " jump to last cursor position
  autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

  " language-dependent indenting
  autocmd FileType text,markdown set ts=4|set sw=4|set et|set si|set tw=80
  autocmd FileType sh,perl,awk,python set ts=4|set sw=4|set et|set si
  autocmd FileType ruby set ts=2|set sw=2|set et|set si
  autocmd FileType c,h,cpp set ts=8|set sw=8|set noet|set cindent
  autocmd FileType make set ts=8|set sw=8|set noet
  autocmd FileType asm set ts=8|set sw=8|set noet
augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ADD LOCAL SETTINGS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if filereadable(expand("$HOME/.vimrc.local"))
  source $HOME/.vimrc.local
endif
