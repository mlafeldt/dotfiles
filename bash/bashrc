# If not running interactively, don't do anything
[ -z "$PS1" ] && return

# Don't put duplicate lines in the history
HISTCONTROL=ignoredups:ignorespace

# Append to the history file, don't overwrite it
shopt -s histappend

# Use one command per line
shopt -s cmdhist

# Set history length
HISTSIZE=1000000
HISTFILESIZE=1000000

# Store history immediately
PROMPT_COMMAND='history -a'

# Check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

export CLICOLOR=1
export EDITOR=vim

export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

export BASH_SILENCE_DEPRECATION_WARNING=1

export HOMEBREW_PREFIX=$(brew --prefix)
export GITHUB_USER=mlafeldt
alias git=hub

# Enable bash completion
export BASH_COMPLETION_COMPAT_DIR="$HOMEBREW_PREFIX/etc/bash_completion.d"
if [ -r "$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh" ]; then
    . "$HOMEBREW_PREFIX/etc/profile.d/bash_completion.sh"
fi

# Go
if command -v go >/dev/null; then
    export GOPATH="$HOME/devel/go"
    export GOROOT="$(go env GOROOT)"
    export PATH="$GOPATH/bin:$GOROOT/bin:$PATH"

    export GOTEST_PALETTE="red,blue"
    export GOTEST_SKIPNOTESTS="true"
fi

# Rust
if test -x "$HOME/.cargo/bin/cargo" >/dev/null; then
    export PATH="$HOME/.cargo/bin:$PATH"
    export OPENSSL_INCLUDE_DIR="$HOMEBREW_PREFIX/opt/openssl/include"
    export OPENSSL_LIB_DIR="$HOMEBREW_PREFIX/opt/openssl/lib"

    . $(rustc --print sysroot)/etc/bash_completion.d/cargo
fi

#
# macOS cross compiler toolchains
# https://github.com/messense/homebrew-macos-cross-toolchains
#
# x86_64-unknown-linux-gnu
export CC_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-gcc
export CXX_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-g++
export AR_x86_64_unknown_linux_gnu=x86_64-unknown-linux-gnu-ar
export CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=x86_64-unknown-linux-gnu-gcc
# x86_64-unknown-linux-musl
export CC_x86_64_unknown_linux_musl=x86_64-unknown-linux-musl-gcc
export CXX_x86_64_unknown_linux_musl=x86_64-unknown-linux-musl-g++
export AR_x86_64_unknown_linux_musl=x86_64-unknown-linux-musl-ar
export CARGO_TARGET_X86_64_UNKNOWN_LINUX_MUSL_LINKER=x86_64-unknown-linux-musl-gcc

# aarch64-unknown-linux-gnu
export CC_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-gcc
export CXX_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-g++
export AR_aarch64_unknown_linux_gnu=aarch64-unknown-linux-gnu-ar
export CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-unknown-linux-gnu-gcc
# wasm32-unknown-unknown (brew install llvm)
export CC_wasm32_unknown_unknown=$HOMEBREW_PREFIX/opt/llvm/bin/clang
export CXX_wasm32_unknown_unknown=$HOMEBREW_PREFIX/opt/llvm/bin/clang++
export AR_wasm32_unknown_unknown=$HOMEBREW_PREFIX/opt/llvm/bin/llvm-ar

# AWS
export AWS_REGION=eu-central-1
export AWS_DEFAULT_REGION=$AWS_REGION
export AWS_ASSUME_ROLE_TTL=1h
export AWS_SESSION_TOKEN_TTL=12h
export AWS_FEDERATION_TOKEN_TTL=12h

if command -v aws-vault >/dev/null; then
    _fuzzy_awsvault() {
        local profile
        local cmd="$1"
        shift
        if test $# -eq 0; then
            profile=$(aws-vault list --profiles | fzf) || return 1
            echo "$profile" >&2
            aws-vault "$cmd" "$profile"
        else
            aws-vault "$cmd" "$@"
        fi
    }
    ax() { _fuzzy_awsvault exec  "$@"; }
    al() { _fuzzy_awsvault login "$@"; }

    eval "$(aws-vault --completion-script-bash | sed 's/^complete .*/& al ax/')"
fi

# Use GNU utils
PATH="/usr/local/opt/gnu-sed/libexec/gnubin:$PATH"
PATH="/usr/local/opt/gnu-tar/libexec/gnubin:$PATH"

# Set up gpg agent for use with git
if command -v gpg-agent >/dev/null; then
    gpg-agent --daemon 2>/dev/null
    export GPG_TTY=$(tty)
fi

[ -f "$HOMEBREW_PREFIX/share/autojump/autojump.bash" ] && . "$HOMEBREW_PREFIX/share/autojump/autojump.bash"

if command -v starship >/dev/null; then
    eval "$(starship init bash)"
fi

# Include alias definitions
[ -f "$HOME/.bash_aliases" ] && . "$HOME/.bash_aliases"

# Source local settings if present
[ -f "$HOME/.bashrc.local" ] && . "$HOME/.bashrc.local"

if command -v direnv >/dev/null; then
    eval "$(direnv hook bash)"
fi

:
