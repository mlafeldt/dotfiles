#!/usr/bin/env bun
// Make an authenticated HTTP request to the Cloudflare API and print the response.
// Inspired by `gh api`.
//
// Usage: cf-api <endpoint>
//
// Placeholder values `{account}` and `{zone}` in the endpoint argument will get
// replaced with values from the environment variables CLOUDFLARE_ACCOUNT_ID and
// CLOUDFLARE_ZONE_ID, respectively.
//
// Example: cf-api /accounts/{account}/d1/database

import wretch from 'wretch'

const apiToken = process.env.CLOUDFLARE_API_TOKEN
const accountId = process.env.CLOUDFLARE_ACCOUNT_ID
const zoneId = process.env.CLOUDFLARE_ZONE_ID

if (!apiToken) {
  console.error('CLOUDFLARE_API_TOKEN must be set')
  process.exit(1)
}

const endpoint =
  Bun.argv[2]?.replace(/{account}|{account_id}/g, accountId)?.replace(/{zone}|{zone_id}/g, zoneId) || 'accounts'

wretch(`https://api.cloudflare.com/client/v4/${endpoint}`)
  .auth(`Bearer ${apiToken}`)
  .get()
  .json()
  .catch((error) => {
    const message =
      error.json?.errors?.map((e) => `${e.message} [code: ${e.code}]`).join('\n') ||
      `${error.message} [status: ${error.status}]`
    console.error(message)
    process.exit(1)
  })
  .then((data) => console.log(JSON.stringify(data.result, null, 2)))

// vim: ft=javascript
