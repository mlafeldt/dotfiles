#!/usr/bin/env bun
// Make an authenticated HTTP request to the Cloudflare API and print the response.
// Inspired by `gh api`.
//
// Usage: cf-api <endpoint> [<body>]
//
// Placeholder values `{name}` in the endpoint argument will get replaced with
// values from these environment variables:
//
//   CLOUDFLARE_ACCOUNT_ID: {account} or {account_id}
//   CLOUDFLARE_ZONE_ID: {zone} or {zone_id}
//   CLOUDFLARE_DATABASE_ID: {database} or {database_id}
//
// Examples:
//
//   cf-api /accounts/{account}/d1/database
//   cf-api /zones/{zone}/purge_cache '{"purge_everything": true}'
//   cf-api /accounts/{account}/d1/database/{database}/query '{"sql": "select * from users"}'

import wretch from 'wretch'

const apiToken = process.env.CLOUDFLARE_API_TOKEN
const accountId = process.env.CLOUDFLARE_ACCOUNT_ID
const zoneId = process.env.CLOUDFLARE_ZONE_ID
const databaseId = process.env.CLOUDFLARE_DATABASE_ID

if (!apiToken) {
  console.error('CLOUDFLARE_API_TOKEN must be set')
  process.exit(1)
}

const endpoint =
  Bun.argv[2]
    ?.replace(/{account}|{account_id}/g, accountId)
    ?.replace(/{zone}|{zone_id}/g, zoneId)
    ?.replace(/{database}|{database_id}/g, databaseId) || 'accounts'

const body = Bun.argv[3]

const api = wretch(`https://api.cloudflare.com/client/v4/${endpoint}`)
  .auth(`Bearer ${apiToken}`)
  .resolve((r) => r.json())

const request = body ? api.post(body) : api.get()

request
  .catch((error) => {
    const msg =
      error.json?.errors?.map((e) => `${e.message} [code: ${e.code}]`).join('\n') ||
      `${error.message} [status: ${error.status}]`
    console.error('error:', msg)
    process.exit(1)
  })
  .then((data) => console.log(JSON.stringify(data.result, null, 2)))

// vim: ft=javascript
