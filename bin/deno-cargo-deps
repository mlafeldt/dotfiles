#!/usr/bin/env deno run --ext=ts --allow-net=raw.githubusercontent.com,api.github.com --allow-env=GITHUB_TOKEN
// Output dependencies for a specific Deno version that you can paste into your Cargo.toml
//
// Usage: deno-cargo-deps [<deno git ref>] [<crate>...]
//
// Examples:
//
//   ❯ deno-cargo-deps
//   # Deno v1.45.2
//   deno_core = "0.293.0"
//   deno_runtime = "0.169.0"
//
//   ❯ deno-cargo-deps v1.44
//   # Deno v1.44.4
//   deno_core = "0.290.0"
//   deno_runtime = "0.166.0"
//
//   ❯ deno-cargo-deps main deno_ast deno_core
//   # Deno v1.45.2
//   deno_ast = { version = "=0.40.0", features = ["transpiling"] }
//   deno_core = "0.294.0"

import wretch from 'npm:wretch'
import { parse, stringify } from 'jsr:@std/toml'

const [ref, ...crates] = Deno.args
const refOrTag = !ref || ref === 'latest' ? await getLatestTag() : ref
const deps = await getWorkspaceDeps(refOrTag)
const version = await getCliVersion(refOrTag)

console.log(`# Deno v${version}`)

if (crates.length > 0) {
  for (const crate of crates) {
    printDep(crate, deps)
  }
} else {
  printDep('deno_core', deps)
  printDep('deno_runtime', deps)
}

function getLatestTag() {
  const token = Deno.env.get('GITHUB_TOKEN')
  const headers = new Headers()
  if (token) {
    headers.set('authorization', `token ${token}`)
  }
  return wretch('https://api.github.com/repos/denoland/deno/releases/latest')
    .headers(headers)
    .get()
    .json((release: { tag_name: string }) => release.tag_name)
}

async function getWorkspaceDeps(ref: string) {
  const toml = await wretch(`https://raw.githubusercontent.com/denoland/deno/${ref}/Cargo.toml`).get().text(parse)
  return (toml.workspace as any).dependencies
}

async function getCliVersion(ref: string) {
  const toml = await wretch(`https://raw.githubusercontent.com/denoland/deno/${ref}/cli/Cargo.toml`).get().text(parse)
  return (toml.package as any).version
}

function printDep(name: string, deps: Record<string, any>) {
  const spec = deps[name]
  if (!spec) {
    throw new Error(`${name} not found in Cargo.toml`)
  }
  delete spec.path

  if (typeof spec === 'string') {
    console.log(`${name} = "${pin(spec)}"`)
  } else if (Object.keys(spec).length === 1) {
    console.log(`${name} = "${pin(spec.version)}"`)
  } else {
    const parts = stringify(spec).split('\n')
    const csv = parts.slice(0, -1).join(', ') + parts.slice(-1)
    console.log(`${name} = { ${csv} }`)
  }
}

function pin(version: string) {
  return version.startsWith('=') ? version : `=${version}`
}

// vim: ft=typescript
