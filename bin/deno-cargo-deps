#!/usr/bin/env deno run --ext=ts --allow-net=raw.githubusercontent.com,api.github.com --allow-env=GITHUB_TOKEN
// Output dependencies for a specific Deno version that you can paste into your Cargo.toml
//
// Usage: deno-cargo-deps [<deno git ref>]
//
// Example output:
//
//   # Deno v1.43.1
//   deno_ast = { version = "=0.38.1", features = ["transpiling"] }
//   deno_core = "=0.278.0"
//   deno_runtime = "=0.157.0"

import wretch from "npm:wretch"
import { parse } from "jsr:@std/toml"

const ref = Deno.args[0] || await getLatestTag()
const deps = await getWorkspaceDeps(ref)
const version = await getCliVersion(ref)

console.log(`# Deno v${version}`)
printDep("deno_ast", deps)
printDep("deno_core", deps)
printDep("deno_runtime", deps)

function getLatestTag() {
  const token = Deno.env.get("GITHUB_TOKEN")
  const headers = new Headers()
  if (token) {
    headers.set("authorization", `token ${token}`)
  }
  return wretch("https://api.github.com/repos/denoland/deno/releases/latest")
    .headers(headers)
    .get()
    .json((release) => release.tag_name)
}

async function getWorkspaceDeps(ref: string) {
  const toml = await wretch(`https://raw.githubusercontent.com/denoland/deno/${ref}/Cargo.toml`).get().text(parse)
  return (toml.workspace as any).dependencies
}

async function getCliVersion(ref: string) {
  const toml = await wretch(`https://raw.githubusercontent.com/denoland/deno/${ref}/cli/Cargo.toml`).get().text(parse)
  return (toml.package as any).version
}

function printDep(name: string, deps: Record<string, any>) {
  const version = deps[name].version.replace("=", "")
  const features = deps[name].features

  if (features) {
    console.log(`${name} = { version = "=${version}", features = ${JSON.stringify(features)} }`)
  } else {
    console.log(`${name} = "=${version}"`)
  }
}
