#!/usr/bin/env deno run
// Based on https://github.com/zaccharles/dynamodb-calculator/blob/master/index.html
// by Zac Charles. Adapted for CLI by Mathias Lafeldt. MIT License.
// Usage: dynamodb-calculator <DynamoDB JSON>

import utf8 from 'npm:utf8@^3';
import Decimal from 'npm:decimal.js-light@^2';

const BASE_LOGICAL_SIZE_OF_NESTED_TYPES = 1;
const LOGICAL_SIZE_OF_EMPTY_DOCUMENT = 3;

function determineLargestAttribute(attributeSizes) {
    var largestAttribute;
    var maxSize = 0;

    for (var currentAttribute in attributeSizes) {
        if (!attributeSizes.hasOwnProperty(currentAttribute)) continue;

        var { total: currentSize } = attributeSizes[currentAttribute];
        if (currentSize > maxSize) {
            maxSize = currentSize;
            largestAttribute = currentAttribute;
        }
    }

    return largestAttribute;
}

function calculateItemSizeInBytes(item) {
    var sizes = {};
    var totalSize = 0;

    for (var name in item) {
        if (!item.hasOwnProperty(name)) continue;

        var size = {
            sizeOfName: utf8.encode(name).length,
            attributeSize: calculateAttributeSizeInBytes(item[name])
        };
        size.total = size.sizeOfName + size.attributeSize;

        totalSize += size.total;
        sizes[name] = size;
    }

    return { size: totalSize, sizes };
}

function calculateAttributeSizeInBytes(attr) {
    if (!attr) return 0;

    // Binary
    if (attr.hasOwnProperty('B')) {
        return atob(attr.B).length;
    }

    // String
    if (attr.hasOwnProperty('S')) {
        return utf8.encode(attr.S).length;
    }

    // Number
    if (attr.hasOwnProperty('N')) {
        return calculateNumberSizeInBytes(attr.N);
    }

    // BinarySet
    if (attr.hasOwnProperty('BS')) {
        var size = 0;

        for (var i = 0; i < attr.BS.length; i++) {
            size += atob(attr.BS[i]).length;
        }

        return size;
    }

    // StringSet
    if (attr.hasOwnProperty('SS')) {
        var size = 0;

        for (var i = 0; i < attr.SS.length; i++) {
            size += utf8.encode(attr.SS[i]).length;
        }

        return size;
    }

    //  NumberSet
    if (attr.hasOwnProperty('NS')) {
        var size = 0;

        for (var i = 0; i < attr.NS.length; i++) {
            size += calculateNumberSizeInBytes(attr.NS[i]);
        }

        return size;
    }

    // Boolean
    if (attr.hasOwnProperty('BOOL')) {
        return 1;
    }

    // Null
    if (attr.hasOwnProperty('NULL')) {
        return 1;
    }

    // Map
    if (attr.hasOwnProperty('M')) {
        var size = LOGICAL_SIZE_OF_EMPTY_DOCUMENT;

        for (var name in attr.M) {
            if (!attr.M.hasOwnProperty(name)) continue;

            size += utf8.encode(name).length;
            size += calculateAttributeSizeInBytes(attr.M[name]);
            size += BASE_LOGICAL_SIZE_OF_NESTED_TYPES;
        }

        return size;
    }

    // List
    if (attr.hasOwnProperty('L')) {
        var size = LOGICAL_SIZE_OF_EMPTY_DOCUMENT;

        for (var i = 0; i < attr.L.length; i++) {
            size += calculateAttributeSizeInBytes(attr.L[i]);
            size += BASE_LOGICAL_SIZE_OF_NESTED_TYPES;
        }

        return size;
    }

    throw "unknown data type in " + JSON.stringify(attr);
}

function calculateNumberSizeInBytes(n) {
    var decimal = new Decimal(n);
    if (decimal == 0) return 1;
    var fixed = decimal.toFixed();
    var size = measure(fixed.replace('-', '')) + 1;
    if (fixed.startsWith('-')) size++;
    if (size > 21) size = 21;
    return size;
}

function measure(n) {
    if (n.indexOf('.') !== -1) {
        var parts = n.split('.');
        var p0 = parts[0];
        var p1 = parts[1];
        if (p0 === '0') {
            p0 = '';
            p1 = zeros(p1, true);
        }
        if (p0.length % 2 !== 0) p0 = 'Z' + p0;
        if (p1.length % 2 !== 0) p1 = p1 + 'Z';
        return measure(p0 + p1);
    }
    n = zeros(n, true, true);
    return Math.ceil(n.length / 2);
}

function zeros(n, left, right) {
    while (left && true) {
        var t = n.replace(/^(0{2})/, '');
        if (t.length == n.length) break;
        n = t;
    }
    while (right && true) {
        var t = n.replace(/(0{2})$/, '');
        if (t.length == n.length) break;
        n = t;
    }
    return n;
}

const item = JSON.parse(Deno.args[0]);
const { size, sizes } = calculateItemSizeInBytes(item);
const largestAttribute = determineLargestAttribute(sizes);
const rcus = Math.ceil(size / 4096);
const wcus = Math.ceil(size / 1024);

console.log('Total size:', size, 'bytes');
console.log('Attribute sizes:', sizes);
console.log('Largest attribute:', largestAttribute);
console.log('RCUs:', rcus);
console.log('WCUs:', wcus);
